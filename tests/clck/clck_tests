#!../common/bats/bin/bats
# -*-sh-*-

load ../common/test_helper_functions || exit 1

if [ -s ../TEST_ENV ];then
    source ../TEST_ENV
fi

testname=CLCK
PKG=CLCK
module=clck
rpm=intel-clck${DELIM}

setup() {
    if [ -z "$MODULEPATH" ];then
	. /etc/profile.d/lmod.sh || exit 1
    fi
    module purge        || exit 1
    module load $module || exit 1

    # define shared temp_dir
    export CLCK_SHARED_TEMP_DIR=`pwd`
}

@test "[$testname] Verify $PKG module is loaded and matches rpm version" {

    run test -n "$CLCK_ROOT"
    assert_success

    run which clck
    assert_success

    # query module version
    module list $module | grep "1) $module" >& .cmd_output || exit 1
    run grep $module .cmd_output 
    assert_success

    # check version against rpm
    local version="$(rpm -q --queryformat='%{VERSION}\n' $rpm)"
    run cat .cmd_output
    assert_output "  1) $module/$version"

    # check version against binary

    clck --version | head -1 | awk '{print $4}' >& .cmd_output || exit 1
    run cat .cmd_output
    assert_output "$version"
    
}

@test "[CLCK] create clck nodelist" {
    echo `hostname -s`" # role: head" > clck.nodelist
#    echo "localhost  # role: head" > clck.nodelist
    koomie_cf -x "c[0-9]+\b" uptime | grep average | awk '{print $1}' >> clck.nodelist
    num_hosts=`wc -l clck.nodelist | awk '{print $1}'`
    if [ "$num_hosts" -lt 2 ];then
	ERROR_RETURN "Test requires at least 2 hosts"
    fi
}

@test "[CLCK] verify environment consistent on valid cluster nodes" {
    run rm -f /root/.clck/*/clck.db
    run clck-collect -s environment -f clck.nodelist
    run clck-analyze -I environment -f clck.nodelist
    assert_success
}

@test "[CLCK] verify error detected when invalid nodename prescribed" {
    run cp -p clck.nodelist clck.nodelist.invalid
    assert_success

    echo "bad-nodename" >> clck.nodelist.invalid
    run clck-collect -m printenv -f clck.nodelist.invalid
    run clck-analyze -I environment -f clck.nodelist.invalid
    assert_failure
}

@test "[CLCK] verify rpms consistent" {

    run clck-analyze -I rpm -f clck.nodelist
    assert_failure

    run clck-collect -s rpm -f clck.nodelist
    run clck-analyze -I rpm -f clck.nodelist

    assert_success
}

@test "[CLCK] verify ethernet driver uniformity" {

    run clck-analyze -I ethernet -f clck.nodelist
    assert_failure

    run clck-collect -s ethernet -f clck.nodelist
    run clck-analyze -I ethernet -f clck.nodelist

    assert_success
}

@test "[CLCK] verify cpu" {

    run clck-analyze -I cpu -f clck.nodelist
    assert_failure

    run clck-collect -s cpu -f clck.nodelist
    run clck-analyze -I cpu -f clck.nodelist

    assert_success
}

@test "[CLCK] verify ntp clock synchronization" {
    skip
    run clck-analyze -I ntp -f clck.nodelist
    assert_failure

    run clck-collect -s ntp -f clck.nodelist
    run clck-analyze -I ntp -f clck.nodelist

    assert_success
}






